//! Syscalls for the sparc architecture.

// This file is automatically generated. Do not edit!

use lazy_static::lazy_static;
use std::collections::HashMap;
use super::super::Argument;

syscall_enum! {
    pub enum Sysno {
        restart_syscall = 0,
        exit = 1,
        fork = 2,
        read = 3,
        write = 4,
        open = 5,
        close = 6,
        wait4 = 7,
        creat = 8,
        link = 9,
        unlink = 10,
        execv = 11,
        chdir = 12,
        chown = 13,
        mknod = 14,
        chmod = 15,
        lchown = 16,
        brk = 17,
        perfctr = 18,
        lseek = 19,
        getpid = 20,
        capget = 21,
        capset = 22,
        setuid = 23,
        getuid = 24,
        vmsplice = 25,
        ptrace = 26,
        alarm = 27,
        sigaltstack = 28,
        pause = 29,
        utime = 30,
        lchown32 = 31,
        fchown32 = 32,
        access = 33,
        nice = 34,
        chown32 = 35,
        sync = 36,
        kill = 37,
        stat = 38,
        sendfile = 39,
        lstat = 40,
        dup = 41,
        pipe = 42,
        times = 43,
        getuid32 = 44,
        umount2 = 45,
        setgid = 46,
        getgid = 47,
        signal = 48,
        geteuid = 49,
        getegid = 50,
        acct = 51,
        getgid32 = 53,
        ioctl = 54,
        reboot = 55,
        mmap2 = 56,
        symlink = 57,
        readlink = 58,
        execve = 59,
        umask = 60,
        chroot = 61,
        fstat = 62,
        fstat64 = 63,
        getpagesize = 64,
        msync = 65,
        vfork = 66,
        pread64 = 67,
        pwrite64 = 68,
        geteuid32 = 69,
        getegid32 = 70,
        mmap = 71,
        setreuid32 = 72,
        munmap = 73,
        mprotect = 74,
        madvise = 75,
        vhangup = 76,
        truncate64 = 77,
        mincore = 78,
        getgroups = 79,
        setgroups = 80,
        getpgrp = 81,
        setgroups32 = 82,
        setitimer = 83,
        ftruncate64 = 84,
        swapon = 85,
        getitimer = 86,
        setuid32 = 87,
        sethostname = 88,
        setgid32 = 89,
        dup2 = 90,
        setfsuid32 = 91,
        fcntl = 92,
        select = 93,
        setfsgid32 = 94,
        fsync = 95,
        setpriority = 96,
        socket = 97,
        connect = 98,
        accept = 99,
        getpriority = 100,
        rt_sigreturn = 101,
        rt_sigaction = 102,
        rt_sigprocmask = 103,
        rt_sigpending = 104,
        rt_sigtimedwait = 105,
        rt_sigqueueinfo = 106,
        rt_sigsuspend = 107,
        setresuid32 = 108,
        getresuid32 = 109,
        setresgid32 = 110,
        getresgid32 = 111,
        setregid32 = 112,
        recvmsg = 113,
        sendmsg = 114,
        getgroups32 = 115,
        gettimeofday = 116,
        getrusage = 117,
        getsockopt = 118,
        getcwd = 119,
        readv = 120,
        writev = 121,
        settimeofday = 122,
        fchown = 123,
        fchmod = 124,
        recvfrom = 125,
        setreuid = 126,
        setregid = 127,
        rename = 128,
        truncate = 129,
        ftruncate = 130,
        flock = 131,
        lstat64 = 132,
        sendto = 133,
        shutdown = 134,
        socketpair = 135,
        mkdir = 136,
        rmdir = 137,
        utimes = 138,
        stat64 = 139,
        sendfile64 = 140,
        getpeername = 141,
        futex = 142,
        gettid = 143,
        getrlimit = 144,
        setrlimit = 145,
        pivot_root = 146,
        prctl = 147,
        pciconfig_read = 148,
        pciconfig_write = 149,
        getsockname = 150,
        inotify_init = 151,
        inotify_add_watch = 152,
        poll = 153,
        getdents64 = 154,
        fcntl64 = 155,
        inotify_rm_watch = 156,
        statfs = 157,
        fstatfs = 158,
        umount = 159,
        sched_set_affinity = 160,
        sched_get_affinity = 161,
        getdomainname = 162,
        setdomainname = 163,
        quotactl = 165,
        set_tid_address = 166,
        mount = 167,
        ustat = 168,
        setxattr = 169,
        lsetxattr = 170,
        fsetxattr = 171,
        getxattr = 172,
        lgetxattr = 173,
        getdents = 174,
        setsid = 175,
        fchdir = 176,
        fgetxattr = 177,
        listxattr = 178,
        llistxattr = 179,
        flistxattr = 180,
        removexattr = 181,
        lremovexattr = 182,
        sigpending = 183,
        query_module = 184,
        setpgid = 185,
        fremovexattr = 186,
        tkill = 187,
        exit_group = 188,
        uname = 189,
        init_module = 190,
        personality = 191,
        remap_file_pages = 192,
        epoll_create = 193,
        epoll_ctl = 194,
        epoll_wait = 195,
        ioprio_set = 196,
        getppid = 197,
        sigaction = 198,
        sgetmask = 199,
        ssetmask = 200,
        sigsuspend = 201,
        oldlstat = 202,
        uselib = 203,
        readdir = 204,
        readahead = 205,
        socketcall = 206,
        syslog = 207,
        lookup_dcookie = 208,
        fadvise64 = 209,
        fadvise64_64 = 210,
        tgkill = 211,
        waitpid = 212,
        swapoff = 213,
        sysinfo = 214,
        ipc = 215,
        sigreturn = 216,
        clone = 217,
        ioprio_get = 218,
        adjtimex = 219,
        sigprocmask = 220,
        create_module = 221,
        delete_module = 222,
        get_kernel_syms = 223,
        getpgid = 224,
        bdflush = 225,
        sysfs = 226,
        afs_syscall = 227,
        setfsuid = 228,
        setfsgid = 229,
        _newselect = 230,
        time = 231,
        splice = 232,
        stime = 233,
        statfs64 = 234,
        fstatfs64 = 235,
        _llseek = 236,
        mlock = 237,
        munlock = 238,
        mlockall = 239,
        munlockall = 240,
        sched_setparam = 241,
        sched_getparam = 242,
        sched_setscheduler = 243,
        sched_getscheduler = 244,
        sched_yield = 245,
        sched_get_priority_max = 246,
        sched_get_priority_min = 247,
        sched_rr_get_interval = 248,
        nanosleep = 249,
        mremap = 250,
        _sysctl = 251,
        getsid = 252,
        fdatasync = 253,
        nfsservctl = 254,
        sync_file_range = 255,
        clock_settime = 256,
        clock_gettime = 257,
        clock_getres = 258,
        clock_nanosleep = 259,
        sched_getaffinity = 260,
        sched_setaffinity = 261,
        timer_settime = 262,
        timer_gettime = 263,
        timer_getoverrun = 264,
        timer_delete = 265,
        timer_create = 266,
        vserver = 267,
        io_setup = 268,
        io_destroy = 269,
        io_submit = 270,
        io_cancel = 271,
        io_getevents = 272,
        mq_open = 273,
        mq_unlink = 274,
        mq_timedsend = 275,
        mq_timedreceive = 276,
        mq_notify = 277,
        mq_getsetattr = 278,
        waitid = 279,
        tee = 280,
        add_key = 281,
        request_key = 282,
        keyctl = 283,
        openat = 284,
        mkdirat = 285,
        mknodat = 286,
        fchownat = 287,
        futimesat = 288,
        fstatat64 = 289,
        unlinkat = 290,
        renameat = 291,
        linkat = 292,
        symlinkat = 293,
        readlinkat = 294,
        fchmodat = 295,
        faccessat = 296,
        pselect6 = 297,
        ppoll = 298,
        unshare = 299,
        set_robust_list = 300,
        get_robust_list = 301,
        migrate_pages = 302,
        mbind = 303,
        get_mempolicy = 304,
        set_mempolicy = 305,
        kexec_load = 306,
        move_pages = 307,
        getcpu = 308,
        epoll_pwait = 309,
        utimensat = 310,
        signalfd = 311,
        timerfd_create = 312,
        eventfd = 313,
        fallocate = 314,
        timerfd_settime = 315,
        timerfd_gettime = 316,
        signalfd4 = 317,
        eventfd2 = 318,
        epoll_create1 = 319,
        dup3 = 320,
        pipe2 = 321,
        inotify_init1 = 322,
        accept4 = 323,
        preadv = 324,
        pwritev = 325,
        rt_tgsigqueueinfo = 326,
        perf_event_open = 327,
        recvmmsg = 328,
        fanotify_init = 329,
        fanotify_mark = 330,
        prlimit64 = 331,
        name_to_handle_at = 332,
        open_by_handle_at = 333,
        clock_adjtime = 334,
        syncfs = 335,
        sendmmsg = 336,
        setns = 337,
        process_vm_readv = 338,
        process_vm_writev = 339,
        kern_features = 340,
        kcmp = 341,
        finit_module = 342,
        sched_setattr = 343,
        sched_getattr = 344,
        renameat2 = 345,
        seccomp = 346,
        getrandom = 347,
        memfd_create = 348,
        bpf = 349,
        execveat = 350,
        membarrier = 351,
        userfaultfd = 352,
        bind = 353,
        listen = 354,
        setsockopt = 355,
        mlock2 = 356,
        copy_file_range = 357,
        preadv2 = 358,
        pwritev2 = 359,
        statx = 360,
        io_pgetevents = 361,
        pkey_mprotect = 362,
        pkey_alloc = 363,
        pkey_free = 364,
        rseq = 365,
        semget = 393,
        semctl = 394,
        shmget = 395,
        shmctl = 396,
        shmat = 397,
        shmdt = 398,
        msgget = 399,
        msgsnd = 400,
        msgrcv = 401,
        msgctl = 402,
        clock_gettime64 = 403,
        clock_settime64 = 404,
        clock_adjtime64 = 405,
        clock_getres_time64 = 406,
        clock_nanosleep_time64 = 407,
        timer_gettime64 = 408,
        timer_settime64 = 409,
        timerfd_gettime64 = 410,
        timerfd_settime64 = 411,
        utimensat_time64 = 412,
        pselect6_time64 = 413,
        ppoll_time64 = 414,
        io_pgetevents_time64 = 416,
        recvmmsg_time64 = 417,
        mq_timedsend_time64 = 418,
        mq_timedreceive_time64 = 419,
        semtimedop_time64 = 420,
        rt_sigtimedwait_time64 = 421,
        futex_time64 = 422,
        sched_rr_get_interval_time64 = 423,
        pidfd_send_signal = 424,
        io_uring_setup = 425,
        io_uring_enter = 426,
        io_uring_register = 427,
        open_tree = 428,
        move_mount = 429,
        fsopen = 430,
        fsconfig = 431,
        fsmount = 432,
        fspick = 433,
        pidfd_open = 434,
        close_range = 436,
        openat2 = 437,
        pidfd_getfd = 438,
        faccessat2 = 439,
        process_madvise = 440,
        epoll_pwait2 = 441,
        mount_setattr = 442,
        quotactl_path = 443,
        landlock_create_ruleset = 444,
        landlock_add_rule = 445,
        landlock_restrict_self = 446,
    }
    LAST: landlock_restrict_self;
}

lazy_static! {
    pub static ref DEFINITIONS: HashMap<Sysno, Vec<Argument>> = HashMap::from([
        (
            Sysno::restart_syscall,
            vec![
            ]
        ),
        (
            Sysno::exit,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "error_code".to_string(),
                },
            ]
        ),
        (
            Sysno::fork,
            vec![
            ]
        ),
        (
            Sysno::read,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::write,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::open,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::close,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
            ]
        ),
        (
            Sysno::wait4,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "upid".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "stat_addr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "options".to_string(),
                },
                Argument {
                    ty: "struct rusage __user *".to_string(),
                    name: "ru".to_string(),
                },
            ]
        ),
        (
            Sysno::creat,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::link,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
            ]
        ),
        (
            Sysno::unlink,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
            ]
        ),
        (
            Sysno::chdir,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
            ]
        ),
        (
            Sysno::chown,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "uid_t".to_string(),
                    name: "user".to_string(),
                },
                Argument {
                    ty: "gid_t".to_string(),
                    name: "group".to_string(),
                },
            ]
        ),
        (
            Sysno::mknod,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "unsigned".to_string(),
                    name: "dev".to_string(),
                },
            ]
        ),
        (
            Sysno::chmod,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::lchown,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "uid_t".to_string(),
                    name: "user".to_string(),
                },
                Argument {
                    ty: "gid_t".to_string(),
                    name: "group".to_string(),
                },
            ]
        ),
        (
            Sysno::brk,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "brk".to_string(),
                },
            ]
        ),
        (
            Sysno::lseek,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "off_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "whence".to_string(),
                },
            ]
        ),
        (
            Sysno::getpid,
            vec![
            ]
        ),
        (
            Sysno::capget,
            vec![
                Argument {
                    ty: "cap_user_header_t".to_string(),
                    name: "header".to_string(),
                },
                Argument {
                    ty: "cap_user_data_t".to_string(),
                    name: "dataptr".to_string(),
                },
            ]
        ),
        (
            Sysno::capset,
            vec![
                Argument {
                    ty: "cap_user_header_t".to_string(),
                    name: "header".to_string(),
                },
                Argument {
                    ty: "const cap_user_data_t".to_string(),
                    name: "data".to_string(),
                },
            ]
        ),
        (
            Sysno::setuid,
            vec![
                Argument {
                    ty: "uid_t".to_string(),
                    name: "uid".to_string(),
                },
            ]
        ),
        (
            Sysno::getuid,
            vec![
            ]
        ),
        (
            Sysno::vmsplice,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "uiov".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "nr_segs".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::ptrace,
            vec![
                Argument {
                    ty: "long".to_string(),
                    name: "request".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "data".to_string(),
                },
            ]
        ),
        (
            Sysno::alarm,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "seconds".to_string(),
                },
            ]
        ),
        (
            Sysno::sigaltstack,
            vec![
                Argument {
                    ty: "const stack_t __user *".to_string(),
                    name: "uss".to_string(),
                },
                Argument {
                    ty: "stack_t __user *".to_string(),
                    name: "uoss".to_string(),
                },
            ]
        ),
        (
            Sysno::pause,
            vec![
            ]
        ),
        (
            Sysno::utime,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct utimbuf __user *".to_string(),
                    name: "times".to_string(),
                },
            ]
        ),
        (
            Sysno::access,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::nice,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "increment".to_string(),
                },
            ]
        ),
        (
            Sysno::sync,
            vec![
            ]
        ),
        (
            Sysno::kill,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
            ]
        ),
        (
            Sysno::stat,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct __old_kernel_stat __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::sendfile,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "out_fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "in_fd".to_string(),
                },
                Argument {
                    ty: "off_t __user *".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::lstat,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct __old_kernel_stat __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::dup,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fildes".to_string(),
                },
            ]
        ),
        (
            Sysno::pipe,
            vec![
                Argument {
                    ty: "int __user *".to_string(),
                    name: "fildes".to_string(),
                },
            ]
        ),
        (
            Sysno::times,
            vec![
                Argument {
                    ty: "struct tms __user *".to_string(),
                    name: "tbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::setgid,
            vec![
                Argument {
                    ty: "gid_t".to_string(),
                    name: "gid".to_string(),
                },
            ]
        ),
        (
            Sysno::getgid,
            vec![
            ]
        ),
        (
            Sysno::signal,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "__sighandler_t".to_string(),
                    name: "handler".to_string(),
                },
            ]
        ),
        (
            Sysno::geteuid,
            vec![
            ]
        ),
        (
            Sysno::getegid,
            vec![
            ]
        ),
        (
            Sysno::acct,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
            ]
        ),
        (
            Sysno::ioctl,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg".to_string(),
                },
            ]
        ),
        (
            Sysno::reboot,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "magic1".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "magic2".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "arg".to_string(),
                },
            ]
        ),
        (
            Sysno::mmap2,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "prot".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pgoff".to_string(),
                },
            ]
        ),
        (
            Sysno::symlink,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
            ]
        ),
        (
            Sysno::readlink,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "path".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "bufsiz".to_string(),
                },
            ]
        ),
        (
            Sysno::execve,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "const char __user *const __user *".to_string(),
                    name: "argv".to_string(),
                },
                Argument {
                    ty: "const char __user *const __user *".to_string(),
                    name: "envp".to_string(),
                },
            ]
        ),
        (
            Sysno::umask,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "mask".to_string(),
                },
            ]
        ),
        (
            Sysno::chroot,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
            ]
        ),
        (
            Sysno::fstat,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct __old_kernel_stat __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::fstat64,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct stat64 __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::getpagesize,
            vec![
            ]
        ),
        (
            Sysno::msync,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::vfork,
            vec![
            ]
        ),
        (
            Sysno::pread64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "pos".to_string(),
                },
            ]
        ),
        (
            Sysno::pwrite64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "pos".to_string(),
                },
            ]
        ),
        (
            Sysno::mmap,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "prot".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "off".to_string(),
                },
            ]
        ),
        (
            Sysno::munmap,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::mprotect,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "prot".to_string(),
                },
            ]
        ),
        (
            Sysno::madvise,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len_in".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "behavior".to_string(),
                },
            ]
        ),
        (
            Sysno::vhangup,
            vec![
            ]
        ),
        (
            Sysno::truncate64,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "path".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "length".to_string(),
                },
            ]
        ),
        (
            Sysno::mincore,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned char __user *".to_string(),
                    name: "vec".to_string(),
                },
            ]
        ),
        (
            Sysno::getgroups,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "gidsetsize".to_string(),
                },
                Argument {
                    ty: "gid_t __user *".to_string(),
                    name: "grouplist".to_string(),
                },
            ]
        ),
        (
            Sysno::setgroups,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "gidsetsize".to_string(),
                },
                Argument {
                    ty: "gid_t __user *".to_string(),
                    name: "grouplist".to_string(),
                },
            ]
        ),
        (
            Sysno::getpgrp,
            vec![
            ]
        ),
        (
            Sysno::setitimer,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_itimerval __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_itimerval __user *".to_string(),
                    name: "ovalue".to_string(),
                },
            ]
        ),
        (
            Sysno::ftruncate64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "length".to_string(),
                },
            ]
        ),
        (
            Sysno::swapon,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "specialfile".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "swap_flags".to_string(),
                },
            ]
        ),
        (
            Sysno::getitimer,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_itimerval __user *".to_string(),
                    name: "value".to_string(),
                },
            ]
        ),
        (
            Sysno::sethostname,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::dup2,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "oldfd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "newfd".to_string(),
                },
            ]
        ),
        (
            Sysno::fcntl,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg".to_string(),
                },
            ]
        ),
        (
            Sysno::select,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "n".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "inp".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "outp".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "exp".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_timeval __user *".to_string(),
                    name: "tvp".to_string(),
                },
            ]
        ),
        (
            Sysno::fsync,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
            ]
        ),
        (
            Sysno::setpriority,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "who".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "niceval".to_string(),
                },
            ]
        ),
        (
            Sysno::socket,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "family".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "type".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "protocol".to_string(),
                },
            ]
        ),
        (
            Sysno::connect,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "uservaddr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "addrlen".to_string(),
                },
            ]
        ),
        (
            Sysno::accept,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "upeer_sockaddr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "upeer_addrlen".to_string(),
                },
            ]
        ),
        (
            Sysno::getpriority,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "who".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigreturn,
            vec![
            ]
        ),
        (
            Sysno::rt_sigaction,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "const struct sigaction __user *".to_string(),
                    name: "act".to_string(),
                },
                Argument {
                    ty: "struct sigaction __user *".to_string(),
                    name: "oact".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigprocmask,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "how".to_string(),
                },
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "nset".to_string(),
                },
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "oset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigpending,
            vec![
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "uset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigtimedwait,
            vec![
                Argument {
                    ty: "const sigset_t __user *".to_string(),
                    name: "uthese".to_string(),
                },
                Argument {
                    ty: "siginfo_t __user *".to_string(),
                    name: "uinfo".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "uts".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigqueueinfo,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "siginfo_t __user *".to_string(),
                    name: "uinfo".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_sigsuspend,
            vec![
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "unewset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::recvmsg,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct user_msghdr __user *".to_string(),
                    name: "msg".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::sendmsg,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct user_msghdr __user *".to_string(),
                    name: "msg".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::gettimeofday,
            vec![
                Argument {
                    ty: "struct __kernel_old_timeval __user *".to_string(),
                    name: "tv".to_string(),
                },
                Argument {
                    ty: "struct timezone __user *".to_string(),
                    name: "tz".to_string(),
                },
            ]
        ),
        (
            Sysno::getrusage,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "who".to_string(),
                },
                Argument {
                    ty: "struct rusage __user *".to_string(),
                    name: "ru".to_string(),
                },
            ]
        ),
        (
            Sysno::getsockopt,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "level".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "optname".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "optval".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "optlen".to_string(),
                },
            ]
        ),
        (
            Sysno::getcwd,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::readv,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
            ]
        ),
        (
            Sysno::writev,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
            ]
        ),
        (
            Sysno::settimeofday,
            vec![
                Argument {
                    ty: "struct __kernel_old_timeval __user *".to_string(),
                    name: "tv".to_string(),
                },
                Argument {
                    ty: "struct timezone __user *".to_string(),
                    name: "tz".to_string(),
                },
            ]
        ),
        (
            Sysno::fchown,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "uid_t".to_string(),
                    name: "user".to_string(),
                },
                Argument {
                    ty: "gid_t".to_string(),
                    name: "group".to_string(),
                },
            ]
        ),
        (
            Sysno::fchmod,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::recvfrom,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "ubuf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "addr_len".to_string(),
                },
            ]
        ),
        (
            Sysno::setreuid,
            vec![
                Argument {
                    ty: "uid_t".to_string(),
                    name: "ruid".to_string(),
                },
                Argument {
                    ty: "uid_t".to_string(),
                    name: "euid".to_string(),
                },
            ]
        ),
        (
            Sysno::setregid,
            vec![
                Argument {
                    ty: "gid_t".to_string(),
                    name: "rgid".to_string(),
                },
                Argument {
                    ty: "gid_t".to_string(),
                    name: "egid".to_string(),
                },
            ]
        ),
        (
            Sysno::rename,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
            ]
        ),
        (
            Sysno::truncate,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "path".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "length".to_string(),
                },
            ]
        ),
        (
            Sysno::ftruncate,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "length".to_string(),
                },
            ]
        ),
        (
            Sysno::flock,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
            ]
        ),
        (
            Sysno::lstat64,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct stat64 __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::sendto,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "buff".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "addr_len".to_string(),
                },
            ]
        ),
        (
            Sysno::shutdown,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "how".to_string(),
                },
            ]
        ),
        (
            Sysno::socketpair,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "family".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "type".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "protocol".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "usockvec".to_string(),
                },
            ]
        ),
        (
            Sysno::mkdir,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::rmdir,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
            ]
        ),
        (
            Sysno::utimes,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_timeval __user *".to_string(),
                    name: "utimes".to_string(),
                },
            ]
        ),
        (
            Sysno::stat64,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct stat64 __user *".to_string(),
                    name: "statbuf".to_string(),
                },
            ]
        ),
        (
            Sysno::sendfile64,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "out_fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "in_fd".to_string(),
                },
                Argument {
                    ty: "loff_t __user *".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::getpeername,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "usockaddr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "usockaddr_len".to_string(),
                },
            ]
        ),
        (
            Sysno::futex,
            vec![
                Argument {
                    ty: "u32 __user *".to_string(),
                    name: "uaddr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "op".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "val".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "utime".to_string(),
                },
                Argument {
                    ty: "u32 __user *".to_string(),
                    name: "uaddr2".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "val3".to_string(),
                },
            ]
        ),
        (
            Sysno::gettid,
            vec![
            ]
        ),
        (
            Sysno::getrlimit,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "resource".to_string(),
                },
                Argument {
                    ty: "struct rlimit __user *".to_string(),
                    name: "rlim".to_string(),
                },
            ]
        ),
        (
            Sysno::setrlimit,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "resource".to_string(),
                },
                Argument {
                    ty: "struct rlimit __user *".to_string(),
                    name: "rlim".to_string(),
                },
            ]
        ),
        (
            Sysno::pivot_root,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "new_root".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "put_old".to_string(),
                },
            ]
        ),
        (
            Sysno::prctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "option".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg2".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg3".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg4".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg5".to_string(),
                },
            ]
        ),
        (
            Sysno::pciconfig_read,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "bus".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "dfn".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "off".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::pciconfig_write,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "bus".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "dfn".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "off".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::getsockname,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "usockaddr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "usockaddr_len".to_string(),
                },
            ]
        ),
        (
            Sysno::inotify_init,
            vec![
            ]
        ),
        (
            Sysno::inotify_add_watch,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "mask".to_string(),
                },
            ]
        ),
        (
            Sysno::poll,
            vec![
                Argument {
                    ty: "struct pollfd __user *".to_string(),
                    name: "ufds".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "nfds".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "timeout_msecs".to_string(),
                },
            ]
        ),
        (
            Sysno::getdents64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct linux_dirent64 __user *".to_string(),
                    name: "dirent".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::fcntl64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg".to_string(),
                },
            ]
        ),
        (
            Sysno::inotify_rm_watch,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "__s32".to_string(),
                    name: "wd".to_string(),
                },
            ]
        ),
        (
            Sysno::statfs,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "struct statfs __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::fstatfs,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct statfs __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::umount,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::getdomainname,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::setdomainname,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::quotactl,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "special".to_string(),
                },
                Argument {
                    ty: "qid_t".to_string(),
                    name: "id".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "addr".to_string(),
                },
            ]
        ),
        (
            Sysno::set_tid_address,
            vec![
                Argument {
                    ty: "int __user *".to_string(),
                    name: "tidptr".to_string(),
                },
            ]
        ),
        (
            Sysno::mount,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "dev_name".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "dir_name".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "type".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "data".to_string(),
                },
            ]
        ),
        (
            Sysno::ustat,
            vec![
                Argument {
                    ty: "unsigned".to_string(),
                    name: "dev".to_string(),
                },
                Argument {
                    ty: "struct ustat __user *".to_string(),
                    name: "ubuf".to_string(),
                },
            ]
        ),
        (
            Sysno::setxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::lsetxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::fsetxattr,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::getxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::lgetxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::getdents,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct linux_dirent __user *".to_string(),
                    name: "dirent".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::setsid,
            vec![
            ]
        ),
        (
            Sysno::fchdir,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
            ]
        ),
        (
            Sysno::fgetxattr,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "value".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::listxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "list".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::llistxattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "list".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::flistxattr,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "list".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::removexattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
            ]
        ),
        (
            Sysno::lremovexattr,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
            ]
        ),
        (
            Sysno::sigpending,
            vec![
                Argument {
                    ty: "old_sigset_t __user *".to_string(),
                    name: "uset".to_string(),
                },
            ]
        ),
        (
            Sysno::setpgid,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pgid".to_string(),
                },
            ]
        ),
        (
            Sysno::fremovexattr,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
            ]
        ),
        (
            Sysno::tkill,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
            ]
        ),
        (
            Sysno::exit_group,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "error_code".to_string(),
                },
            ]
        ),
        (
            Sysno::uname,
            vec![
                Argument {
                    ty: "struct old_utsname __user *".to_string(),
                    name: "name".to_string(),
                },
            ]
        ),
        (
            Sysno::init_module,
            vec![
                Argument {
                    ty: "void __user *".to_string(),
                    name: "umod".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "uargs".to_string(),
                },
            ]
        ),
        (
            Sysno::personality,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "personality".to_string(),
                },
            ]
        ),
        (
            Sysno::remap_file_pages,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "prot".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pgoff".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_create,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_ctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "epfd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "op".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct epoll_event __user *".to_string(),
                    name: "event".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_wait,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "epfd".to_string(),
                },
                Argument {
                    ty: "struct epoll_event __user *".to_string(),
                    name: "events".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "maxevents".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "timeout".to_string(),
                },
            ]
        ),
        (
            Sysno::ioprio_set,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "who".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "ioprio".to_string(),
                },
            ]
        ),
        (
            Sysno::getppid,
            vec![
            ]
        ),
        (
            Sysno::sigaction,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "const struct old_sigaction __user *".to_string(),
                    name: "act".to_string(),
                },
                Argument {
                    ty: "struct old_sigaction __user *".to_string(),
                    name: "oact".to_string(),
                },
            ]
        ),
        (
            Sysno::sgetmask,
            vec![
            ]
        ),
        (
            Sysno::ssetmask,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "newmask".to_string(),
                },
            ]
        ),
        (
            Sysno::sigsuspend,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "unused1".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "unused2".to_string(),
                },
                Argument {
                    ty: "old_sigset_t".to_string(),
                    name: "mask".to_string(),
                },
            ]
        ),
        (
            Sysno::uselib,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "library".to_string(),
                },
            ]
        ),
        (
            Sysno::readahead,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::socketcall,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "call".to_string(),
                },
                Argument {
                    ty: "unsigned long __user *".to_string(),
                    name: "args".to_string(),
                },
            ]
        ),
        (
            Sysno::syslog,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "type".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::fadvise64,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "advice".to_string(),
                },
            ]
        ),
        (
            Sysno::fadvise64_64,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "advice".to_string(),
                },
            ]
        ),
        (
            Sysno::tgkill,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "tgid".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
            ]
        ),
        (
            Sysno::waitpid,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "stat_addr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "options".to_string(),
                },
            ]
        ),
        (
            Sysno::swapoff,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "specialfile".to_string(),
                },
            ]
        ),
        (
            Sysno::sysinfo,
            vec![
                Argument {
                    ty: "struct sysinfo __user *".to_string(),
                    name: "info".to_string(),
                },
            ]
        ),
        (
            Sysno::ipc,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "call".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "first".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "second".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "third".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "ptr".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "fifth".to_string(),
                },
            ]
        ),
        (
            Sysno::sigreturn,
            vec![
            ]
        ),
        (
            Sysno::clone,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "clone_flags".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "newsp".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "parent_tidptr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "child_tidptr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "tls".to_string(),
                },
            ]
        ),
        (
            Sysno::ioprio_get,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "who".to_string(),
                },
            ]
        ),
        (
            Sysno::adjtimex,
            vec![
                Argument {
                    ty: "struct __kernel_timex __user *".to_string(),
                    name: "txc_p".to_string(),
                },
            ]
        ),
        (
            Sysno::sigprocmask,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "how".to_string(),
                },
                Argument {
                    ty: "old_sigset_t __user *".to_string(),
                    name: "nset".to_string(),
                },
                Argument {
                    ty: "old_sigset_t __user *".to_string(),
                    name: "oset".to_string(),
                },
            ]
        ),
        (
            Sysno::delete_module,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name_user".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::getpgid,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
            ]
        ),
        (
            Sysno::bdflush,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "func".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "data".to_string(),
                },
            ]
        ),
        (
            Sysno::sysfs,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "option".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg1".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg2".to_string(),
                },
            ]
        ),
        (
            Sysno::setfsuid,
            vec![
                Argument {
                    ty: "uid_t".to_string(),
                    name: "uid".to_string(),
                },
            ]
        ),
        (
            Sysno::setfsgid,
            vec![
                Argument {
                    ty: "gid_t".to_string(),
                    name: "gid".to_string(),
                },
            ]
        ),
        (
            Sysno::time,
            vec![
                Argument {
                    ty: "__kernel_old_time_t __user *".to_string(),
                    name: "tloc".to_string(),
                },
            ]
        ),
        (
            Sysno::splice,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd_in".to_string(),
                },
                Argument {
                    ty: "loff_t __user *".to_string(),
                    name: "off_in".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "fd_out".to_string(),
                },
                Argument {
                    ty: "loff_t __user *".to_string(),
                    name: "off_out".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::stime,
            vec![
                Argument {
                    ty: "__kernel_old_time_t __user *".to_string(),
                    name: "tptr".to_string(),
                },
            ]
        ),
        (
            Sysno::statfs64,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sz".to_string(),
                },
                Argument {
                    ty: "struct statfs64 __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::fstatfs64,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sz".to_string(),
                },
                Argument {
                    ty: "struct statfs64 __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::mlock,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::munlock,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::mlockall,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::munlockall,
            vec![
            ]
        ),
        (
            Sysno::sched_setparam,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct sched_param __user *".to_string(),
                    name: "param".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_getparam,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct sched_param __user *".to_string(),
                    name: "param".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_setscheduler,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "policy".to_string(),
                },
                Argument {
                    ty: "struct sched_param __user *".to_string(),
                    name: "param".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_getscheduler,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_yield,
            vec![
            ]
        ),
        (
            Sysno::sched_get_priority_max,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "policy".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_get_priority_min,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "policy".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_rr_get_interval,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "interval".to_string(),
                },
            ]
        ),
        (
            Sysno::nanosleep,
            vec![
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "rqtp".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "rmtp".to_string(),
                },
            ]
        ),
        (
            Sysno::mremap,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "old_len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "new_len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "new_addr".to_string(),
                },
            ]
        ),
        (
            Sysno::getsid,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
            ]
        ),
        (
            Sysno::fdatasync,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
            ]
        ),
        (
            Sysno::sync_file_range,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "nbytes".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::clock_settime,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "tp".to_string(),
                },
            ]
        ),
        (
            Sysno::clock_gettime,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "tp".to_string(),
                },
            ]
        ),
        (
            Sysno::clock_getres,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "tp".to_string(),
                },
            ]
        ),
        (
            Sysno::clock_nanosleep,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "rqtp".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "rmtp".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_getaffinity,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long __user *".to_string(),
                    name: "user_mask_ptr".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_setaffinity,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long __user *".to_string(),
                    name: "user_mask_ptr".to_string(),
                },
            ]
        ),
        (
            Sysno::timer_settime,
            vec![
                Argument {
                    ty: "timer_t".to_string(),
                    name: "timer_id".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_itimerspec __user *".to_string(),
                    name: "new_setting".to_string(),
                },
                Argument {
                    ty: "struct __kernel_itimerspec __user *".to_string(),
                    name: "old_setting".to_string(),
                },
            ]
        ),
        (
            Sysno::timer_gettime,
            vec![
                Argument {
                    ty: "timer_t".to_string(),
                    name: "timer_id".to_string(),
                },
                Argument {
                    ty: "struct __kernel_itimerspec __user *".to_string(),
                    name: "setting".to_string(),
                },
            ]
        ),
        (
            Sysno::timer_getoverrun,
            vec![
                Argument {
                    ty: "timer_t".to_string(),
                    name: "timer_id".to_string(),
                },
            ]
        ),
        (
            Sysno::timer_delete,
            vec![
                Argument {
                    ty: "timer_t".to_string(),
                    name: "timer_id".to_string(),
                },
            ]
        ),
        (
            Sysno::timer_create,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "struct sigevent __user *".to_string(),
                    name: "timer_event_spec".to_string(),
                },
                Argument {
                    ty: "timer_t __user *".to_string(),
                    name: "created_timer_id".to_string(),
                },
            ]
        ),
        (
            Sysno::io_setup,
            vec![
                Argument {
                    ty: "unsigned".to_string(),
                    name: "nr_events".to_string(),
                },
                Argument {
                    ty: "aio_context_t __user *".to_string(),
                    name: "ctxp".to_string(),
                },
            ]
        ),
        (
            Sysno::io_destroy,
            vec![
                Argument {
                    ty: "aio_context_t".to_string(),
                    name: "ctx".to_string(),
                },
            ]
        ),
        (
            Sysno::io_submit,
            vec![
                Argument {
                    ty: "aio_context_t".to_string(),
                    name: "ctx_id".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "nr".to_string(),
                },
                Argument {
                    ty: "struct iocb __user * __user *".to_string(),
                    name: "iocbpp".to_string(),
                },
            ]
        ),
        (
            Sysno::io_cancel,
            vec![
                Argument {
                    ty: "aio_context_t".to_string(),
                    name: "ctx_id".to_string(),
                },
                Argument {
                    ty: "struct iocb __user *".to_string(),
                    name: "iocb".to_string(),
                },
                Argument {
                    ty: "struct io_event __user *".to_string(),
                    name: "result".to_string(),
                },
            ]
        ),
        (
            Sysno::io_getevents,
            vec![
                Argument {
                    ty: "aio_context_t".to_string(),
                    name: "ctx_id".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "min_nr".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "nr".to_string(),
                },
                Argument {
                    ty: "struct io_event __user *".to_string(),
                    name: "events".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "timeout".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_open,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "u_name".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "oflag".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "struct mq_attr __user *".to_string(),
                    name: "u_attr".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_unlink,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "u_name".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_timedsend,
            vec![
                Argument {
                    ty: "mqd_t".to_string(),
                    name: "mqdes".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "u_msg_ptr".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "msg_len".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "msg_prio".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "u_abs_timeout".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_timedreceive,
            vec![
                Argument {
                    ty: "mqd_t".to_string(),
                    name: "mqdes".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "u_msg_ptr".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "msg_len".to_string(),
                },
                Argument {
                    ty: "unsigned int __user *".to_string(),
                    name: "u_msg_prio".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "u_abs_timeout".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_notify,
            vec![
                Argument {
                    ty: "mqd_t".to_string(),
                    name: "mqdes".to_string(),
                },
                Argument {
                    ty: "const struct sigevent __user *".to_string(),
                    name: "u_notification".to_string(),
                },
            ]
        ),
        (
            Sysno::mq_getsetattr,
            vec![
                Argument {
                    ty: "mqd_t".to_string(),
                    name: "mqdes".to_string(),
                },
                Argument {
                    ty: "const struct mq_attr __user *".to_string(),
                    name: "u_mqstat".to_string(),
                },
                Argument {
                    ty: "struct mq_attr __user *".to_string(),
                    name: "u_omqstat".to_string(),
                },
            ]
        ),
        (
            Sysno::waitid,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "which".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "upid".to_string(),
                },
                Argument {
                    ty: "struct siginfo __user *".to_string(),
                    name: "infop".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "options".to_string(),
                },
                Argument {
                    ty: "struct rusage __user *".to_string(),
                    name: "ru".to_string(),
                },
            ]
        ),
        (
            Sysno::tee,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fdin".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "fdout".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::add_key,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_type".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_description".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "_payload".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "plen".to_string(),
                },
                Argument {
                    ty: "key_serial_t".to_string(),
                    name: "ringid".to_string(),
                },
            ]
        ),
        (
            Sysno::request_key,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_type".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_description".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_callout_info".to_string(),
                },
                Argument {
                    ty: "key_serial_t".to_string(),
                    name: "destringid".to_string(),
                },
            ]
        ),
        (
            Sysno::keyctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "option".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg2".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg3".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg4".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg5".to_string(),
                },
            ]
        ),
        (
            Sysno::openat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::mkdirat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::mknodat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "dev".to_string(),
                },
            ]
        ),
        (
            Sysno::fchownat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "uid_t".to_string(),
                    name: "user".to_string(),
                },
                Argument {
                    ty: "gid_t".to_string(),
                    name: "group".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flag".to_string(),
                },
            ]
        ),
        (
            Sysno::futimesat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct __kernel_old_timeval __user *".to_string(),
                    name: "utimes".to_string(),
                },
            ]
        ),
        (
            Sysno::fstatat64,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct stat64 __user *".to_string(),
                    name: "statbuf".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flag".to_string(),
                },
            ]
        ),
        (
            Sysno::unlinkat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flag".to_string(),
                },
            ]
        ),
        (
            Sysno::renameat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "olddfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "newdfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
            ]
        ),
        (
            Sysno::linkat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "olddfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "newdfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::symlinkat,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "newdfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
            ]
        ),
        (
            Sysno::readlinkat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "pathname".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "bufsiz".to_string(),
                },
            ]
        ),
        (
            Sysno::fchmodat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "umode_t".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::faccessat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "mode".to_string(),
                },
            ]
        ),
        (
            Sysno::pselect6,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "n".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "inp".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "outp".to_string(),
                },
                Argument {
                    ty: "fd_set __user *".to_string(),
                    name: "exp".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "tsp".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "sig".to_string(),
                },
            ]
        ),
        (
            Sysno::ppoll,
            vec![
                Argument {
                    ty: "struct pollfd __user *".to_string(),
                    name: "ufds".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "nfds".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "tsp".to_string(),
                },
                Argument {
                    ty: "const sigset_t __user *".to_string(),
                    name: "sigmask".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::unshare,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "unshare_flags".to_string(),
                },
            ]
        ),
        (
            Sysno::set_robust_list,
            vec![
                Argument {
                    ty: "struct robust_list_head __user *".to_string(),
                    name: "head".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::get_robust_list,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct robust_list_head __user * __user *".to_string(),
                    name: "head_ptr".to_string(),
                },
                Argument {
                    ty: "size_t __user *".to_string(),
                    name: "len_ptr".to_string(),
                },
            ]
        ),
        (
            Sysno::migrate_pages,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "maxnode".to_string(),
                },
                Argument {
                    ty: "const unsigned long __user *".to_string(),
                    name: "old_nodes".to_string(),
                },
                Argument {
                    ty: "const unsigned long __user *".to_string(),
                    name: "new_nodes".to_string(),
                },
            ]
        ),
        (
            Sysno::mbind,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "const unsigned long __user *".to_string(),
                    name: "nmask".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "maxnode".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::get_mempolicy,
            vec![
                Argument {
                    ty: "int __user *".to_string(),
                    name: "policy".to_string(),
                },
                Argument {
                    ty: "unsigned long __user *".to_string(),
                    name: "nmask".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "maxnode".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "addr".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::set_mempolicy,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "const unsigned long __user *".to_string(),
                    name: "nmask".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "maxnode".to_string(),
                },
            ]
        ),
        (
            Sysno::kexec_load,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "entry".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "nr_segments".to_string(),
                },
                Argument {
                    ty: "struct kexec_segment __user *".to_string(),
                    name: "segments".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::move_pages,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "nr_pages".to_string(),
                },
                Argument {
                    ty: "const void __user * __user *".to_string(),
                    name: "pages".to_string(),
                },
                Argument {
                    ty: "const int __user *".to_string(),
                    name: "nodes".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "status".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::getcpu,
            vec![
                Argument {
                    ty: "unsigned __user *".to_string(),
                    name: "cpup".to_string(),
                },
                Argument {
                    ty: "unsigned __user *".to_string(),
                    name: "nodep".to_string(),
                },
                Argument {
                    ty: "struct getcpu_cache __user *".to_string(),
                    name: "unused".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_pwait,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "epfd".to_string(),
                },
                Argument {
                    ty: "struct epoll_event __user *".to_string(),
                    name: "events".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "maxevents".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "timeout".to_string(),
                },
                Argument {
                    ty: "const sigset_t __user *".to_string(),
                    name: "sigmask".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::utimensat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "utimes".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::signalfd,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "ufd".to_string(),
                },
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "user_mask".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sizemask".to_string(),
                },
            ]
        ),
        (
            Sysno::timerfd_create,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "clockid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::eventfd,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "count".to_string(),
                },
            ]
        ),
        (
            Sysno::fallocate,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "offset".to_string(),
                },
                Argument {
                    ty: "loff_t".to_string(),
                    name: "len".to_string(),
                },
            ]
        ),
        (
            Sysno::timerfd_settime,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "ufd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_itimerspec __user *".to_string(),
                    name: "utmr".to_string(),
                },
                Argument {
                    ty: "struct __kernel_itimerspec __user *".to_string(),
                    name: "otmr".to_string(),
                },
            ]
        ),
        (
            Sysno::timerfd_gettime,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "ufd".to_string(),
                },
                Argument {
                    ty: "struct __kernel_itimerspec __user *".to_string(),
                    name: "otmr".to_string(),
                },
            ]
        ),
        (
            Sysno::signalfd4,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "ufd".to_string(),
                },
                Argument {
                    ty: "sigset_t __user *".to_string(),
                    name: "user_mask".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sizemask".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::eventfd2,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "count".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_create1,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::dup3,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "oldfd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "newfd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::pipe2,
            vec![
                Argument {
                    ty: "int __user *".to_string(),
                    name: "fildes".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::inotify_init1,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::accept4,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "upeer_sockaddr".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "upeer_addrlen".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::preadv,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_l".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_h".to_string(),
                },
            ]
        ),
        (
            Sysno::pwritev,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_l".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_h".to_string(),
                },
            ]
        ),
        (
            Sysno::rt_tgsigqueueinfo,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "tgid".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "siginfo_t __user *".to_string(),
                    name: "uinfo".to_string(),
                },
            ]
        ),
        (
            Sysno::perf_event_open,
            vec![
                Argument {
                    ty: "struct perf_event_attr __user *".to_string(),
                    name: "attr_uptr".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "cpu".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "group_fd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::recvmmsg,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct mmsghdr __user *".to_string(),
                    name: "mmsg".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "timeout".to_string(),
                },
            ]
        ),
        (
            Sysno::fanotify_init,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "event_f_flags".to_string(),
                },
            ]
        ),
        (
            Sysno::fanotify_mark,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fanotify_fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "__u64".to_string(),
                    name: "mask".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char  __user *".to_string(),
                    name: "pathname".to_string(),
                },
            ]
        ),
        (
            Sysno::prlimit64,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "resource".to_string(),
                },
                Argument {
                    ty: "const struct rlimit64 __user *".to_string(),
                    name: "new_rlim".to_string(),
                },
                Argument {
                    ty: "struct rlimit64 __user *".to_string(),
                    name: "old_rlim".to_string(),
                },
            ]
        ),
        (
            Sysno::name_to_handle_at,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "name".to_string(),
                },
                Argument {
                    ty: "struct file_handle __user *".to_string(),
                    name: "handle".to_string(),
                },
                Argument {
                    ty: "int __user *".to_string(),
                    name: "mnt_id".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flag".to_string(),
                },
            ]
        ),
        (
            Sysno::open_by_handle_at,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "mountdirfd".to_string(),
                },
                Argument {
                    ty: "struct file_handle __user *".to_string(),
                    name: "handle".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::clock_adjtime,
            vec![
                Argument {
                    ty: "const clockid_t".to_string(),
                    name: "which_clock".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timex __user *".to_string(),
                    name: "utx".to_string(),
                },
            ]
        ),
        (
            Sysno::syncfs,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
            ]
        ),
        (
            Sysno::sendmmsg,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct mmsghdr __user *".to_string(),
                    name: "mmsg".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::setns,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::process_vm_readv,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "lvec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "liovcnt".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "rvec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "riovcnt".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::process_vm_writev,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "lvec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "liovcnt".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "rvec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "riovcnt".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::kern_features,
            vec![
            ]
        ),
        (
            Sysno::kcmp,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid1".to_string(),
                },
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid2".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "type".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "idx1".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "idx2".to_string(),
                },
            ]
        ),
        (
            Sysno::finit_module,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "uargs".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_setattr,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct sched_attr __user *".to_string(),
                    name: "uattr".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::sched_getattr,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "struct sched_attr __user *".to_string(),
                    name: "uattr".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "usize".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::renameat2,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "olddfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "oldname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "newdfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "newname".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::seccomp,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "op".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "uargs".to_string(),
                },
            ]
        ),
        (
            Sysno::getrandom,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "buf".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "count".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::memfd_create,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "uname".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::bpf,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "union bpf_attr __user *".to_string(),
                    name: "uattr".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "size".to_string(),
                },
            ]
        ),
        (
            Sysno::execveat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "const char __user *const __user *".to_string(),
                    name: "argv".to_string(),
                },
                Argument {
                    ty: "const char __user *const __user *".to_string(),
                    name: "envp".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::membarrier,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "cpu_id".to_string(),
                },
            ]
        ),
        (
            Sysno::userfaultfd,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::bind,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "struct sockaddr __user *".to_string(),
                    name: "umyaddr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "addrlen".to_string(),
                },
            ]
        ),
        (
            Sysno::listen,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "backlog".to_string(),
                },
            ]
        ),
        (
            Sysno::setsockopt,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "level".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "optname".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "optval".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "optlen".to_string(),
                },
            ]
        ),
        (
            Sysno::mlock2,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::copy_file_range,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd_in".to_string(),
                },
                Argument {
                    ty: "loff_t __user *".to_string(),
                    name: "off_in".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "fd_out".to_string(),
                },
                Argument {
                    ty: "loff_t __user *".to_string(),
                    name: "off_out".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::preadv2,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_l".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_h".to_string(),
                },
                Argument {
                    ty: "rwf_t".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::pwritev2,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_l".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "pos_h".to_string(),
                },
                Argument {
                    ty: "rwf_t".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::statx,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "unsigned".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "mask".to_string(),
                },
                Argument {
                    ty: "struct statx __user *".to_string(),
                    name: "buffer".to_string(),
                },
            ]
        ),
        (
            Sysno::io_pgetevents,
            vec![
                Argument {
                    ty: "aio_context_t".to_string(),
                    name: "ctx_id".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "min_nr".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "nr".to_string(),
                },
                Argument {
                    ty: "struct io_event __user *".to_string(),
                    name: "events".to_string(),
                },
                Argument {
                    ty: "struct __kernel_timespec __user *".to_string(),
                    name: "timeout".to_string(),
                },
                Argument {
                    ty: "const struct __aio_sigset __user *".to_string(),
                    name: "usig".to_string(),
                },
            ]
        ),
        (
            Sysno::pkey_mprotect,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "start".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "len".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "prot".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "pkey".to_string(),
                },
            ]
        ),
        (
            Sysno::pkey_alloc,
            vec![
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "init_val".to_string(),
                },
            ]
        ),
        (
            Sysno::pkey_free,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "pkey".to_string(),
                },
            ]
        ),
        (
            Sysno::rseq,
            vec![
                Argument {
                    ty: "struct rseq __user *".to_string(),
                    name: "rseq".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "rseq_len".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "sig".to_string(),
                },
            ]
        ),
        (
            Sysno::semget,
            vec![
                Argument {
                    ty: "key_t".to_string(),
                    name: "key".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "nsems".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "semflg".to_string(),
                },
            ]
        ),
        (
            Sysno::semctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "semid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "semnum".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "unsigned long".to_string(),
                    name: "arg".to_string(),
                },
            ]
        ),
        (
            Sysno::shmget,
            vec![
                Argument {
                    ty: "key_t".to_string(),
                    name: "key".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "shmflg".to_string(),
                },
            ]
        ),
        (
            Sysno::shmctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "shmid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "struct shmid_ds __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::shmat,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "shmid".to_string(),
                },
                Argument {
                    ty: "char __user *".to_string(),
                    name: "shmaddr".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "shmflg".to_string(),
                },
            ]
        ),
        (
            Sysno::shmdt,
            vec![
                Argument {
                    ty: "char __user *".to_string(),
                    name: "shmaddr".to_string(),
                },
            ]
        ),
        (
            Sysno::msgget,
            vec![
                Argument {
                    ty: "key_t".to_string(),
                    name: "key".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "msgflg".to_string(),
                },
            ]
        ),
        (
            Sysno::msgsnd,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "msqid".to_string(),
                },
                Argument {
                    ty: "struct msgbuf __user *".to_string(),
                    name: "msgp".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "msgsz".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "msgflg".to_string(),
                },
            ]
        ),
        (
            Sysno::msgrcv,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "msqid".to_string(),
                },
                Argument {
                    ty: "struct msgbuf __user *".to_string(),
                    name: "msgp".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "msgsz".to_string(),
                },
                Argument {
                    ty: "long".to_string(),
                    name: "msgtyp".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "msgflg".to_string(),
                },
            ]
        ),
        (
            Sysno::msgctl,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "msqid".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "struct msqid_ds __user *".to_string(),
                    name: "buf".to_string(),
                },
            ]
        ),
        (
            Sysno::pidfd_send_signal,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "pidfd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "sig".to_string(),
                },
                Argument {
                    ty: "siginfo_t __user *".to_string(),
                    name: "info".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::io_uring_setup,
            vec![
                Argument {
                    ty: "u32".to_string(),
                    name: "entries".to_string(),
                },
                Argument {
                    ty: "struct io_uring_params __user *".to_string(),
                    name: "params".to_string(),
                },
            ]
        ),
        (
            Sysno::io_uring_enter,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "to_submit".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "min_complete".to_string(),
                },
                Argument {
                    ty: "u32".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "argp".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "argsz".to_string(),
                },
            ]
        ),
        (
            Sysno::io_uring_register,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "opcode".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "arg".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "nr_args".to_string(),
                },
            ]
        ),
        (
            Sysno::open_tree,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "unsigned".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::move_mount,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "from_dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "from_pathname".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "to_dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "to_pathname".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::fsopen,
            vec![
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_fs_name".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::fsconfig,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "_key".to_string(),
                },
                Argument {
                    ty: "const void __user *".to_string(),
                    name: "_value".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "aux".to_string(),
                },
            ]
        ),
        (
            Sysno::fsmount,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "fs_fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "attr_flags".to_string(),
                },
            ]
        ),
        (
            Sysno::fspick,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "path".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::pidfd_open,
            vec![
                Argument {
                    ty: "pid_t".to_string(),
                    name: "pid".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::close_range,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "max_fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::openat2,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "struct open_how __user *".to_string(),
                    name: "how".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "usize".to_string(),
                },
            ]
        ),
        (
            Sysno::pidfd_getfd,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "pidfd".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "fd".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::faccessat2,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "filename".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "mode".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::process_madvise,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "pidfd".to_string(),
                },
                Argument {
                    ty: "const struct iovec __user *".to_string(),
                    name: "vec".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "vlen".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "behavior".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::epoll_pwait2,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "epfd".to_string(),
                },
                Argument {
                    ty: "struct epoll_event __user *".to_string(),
                    name: "events".to_string(),
                },
                Argument {
                    ty: "int".to_string(),
                    name: "maxevents".to_string(),
                },
                Argument {
                    ty: "const struct __kernel_timespec __user *".to_string(),
                    name: "timeout".to_string(),
                },
                Argument {
                    ty: "const sigset_t __user *".to_string(),
                    name: "sigmask".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "sigsetsize".to_string(),
                },
            ]
        ),
        (
            Sysno::mount_setattr,
            vec![
                Argument {
                    ty: "int".to_string(),
                    name: "dfd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "path".to_string(),
                },
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "flags".to_string(),
                },
                Argument {
                    ty: "struct mount_attr __user *".to_string(),
                    name: "uattr".to_string(),
                },
                Argument {
                    ty: "size_t".to_string(),
                    name: "usize".to_string(),
                },
            ]
        ),
        (
            Sysno::quotactl_path,
            vec![
                Argument {
                    ty: "unsigned int".to_string(),
                    name: "cmd".to_string(),
                },
                Argument {
                    ty: "const char __user *".to_string(),
                    name: "mountpoint".to_string(),
                },
                Argument {
                    ty: "qid_t".to_string(),
                    name: "id".to_string(),
                },
                Argument {
                    ty: "void __user *".to_string(),
                    name: "addr".to_string(),
                },
            ]
        ),
        (
            Sysno::landlock_create_ruleset,
            vec![
                Argument {
                    ty: "const struct landlock_ruleset_attr __user *const".to_string(),
                    name: "attr".to_string(),
                },
                Argument {
                    ty: "const size_t".to_string(),
                    name: "size".to_string(),
                },
                Argument {
                    ty: "const __u32".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::landlock_add_rule,
            vec![
                Argument {
                    ty: "const int".to_string(),
                    name: "ruleset_fd".to_string(),
                },
                Argument {
                    ty: "const enum landlock_rule_type".to_string(),
                    name: "rule_type".to_string(),
                },
                Argument {
                    ty: "const void __user *const".to_string(),
                    name: "rule_attr".to_string(),
                },
                Argument {
                    ty: "const __u32".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
        (
            Sysno::landlock_restrict_self,
            vec![
                Argument {
                    ty: "const int".to_string(),
                    name: "ruleset_fd".to_string(),
                },
                Argument {
                    ty: "const __u32".to_string(),
                    name: "flags".to_string(),
                },
            ]
        ),
    ]);
}
